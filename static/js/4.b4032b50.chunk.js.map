{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogsItem.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/AddMessageForm/AddMessageForm.js","components/Dialogs/Dialogs.jsx","hoc/withAuthRedirect.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","DialogItem","props","className","style","dialog","src","to","id","activeClassName","activeLink","name","Message","message","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","Dialogs","state","dialogsPage","dialogsElements","dialogsData","map","key","messageElements","messagesData","m","newMessageBody","isAuth","dialogs","dialogsItems","messages","values","sendMassage","mapStateToPropsForRedirect","auth","compose","connect","dispatch","sendMessageCreator","Component","RedirectComponent","this","React"],"mappings":"+HACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,OAAS,0B,oBCA9DD,EAAOC,QAAU,CAAC,OAAS,4BAA4B,WAAa,kC,iHCiBrDC,EAbI,SAACC,GAEhB,OACI,yBAAKC,UAAWC,IAAMC,QAClB,6BACI,yBAAKC,IAAI,mFAEb,kBAAC,IAAD,CAASC,GAAI,YAAcL,EAAMM,GAAIL,UAAWC,IAAMC,OAAQI,gBAAiBL,IAAMM,YAAaR,EAAMS,QCHrGC,EANC,SAACV,GACb,OACI,yBAAKC,UAAWC,IAAMC,QAASH,EAAMW,U,yCCAvCC,EAAcC,YAAiB,IAkBtBC,cAAU,CAAEC,KAAM,wBAAlBD,EAhBQ,SAACd,GACpB,OACI,0BAAMgB,SAAUhB,EAAMiB,cAClB,6BACI,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IACXC,SAAU,CAACC,IAAUV,GACrBH,KAAM,iBACNc,YAAY,wBAEvB,6BACI,6CC+BDC,EAvCC,SAACxB,GAEb,IAAIyB,EAAQzB,EAAM0B,YAEdC,EAAkBF,EAAMG,YAAYC,KAAI,SAAC1B,GAAD,OAAY,kBAAC,EAAD,CAAYM,KAAMN,EAAOM,KAAMqB,IAAK3B,EAAOG,GAAIA,GAAIH,EAAOG,QAC9GyB,EAAkBN,EAAMO,aAAaH,KAAI,SAACI,GAAD,OAAO,kBAAC,EAAD,CAAStB,QAASsB,EAAEtB,QAASL,GAAI2B,EAAE3B,GAAIwB,IAAKG,EAAE3B,QAC7EmB,EAAMS,eAc3B,OAAqB,IAAjBlC,EAAMmC,OAAyB,kBAAC,IAAD,CAAU9B,GAAI,WAI7C,yBAAKJ,UAAWC,IAAMkC,SAElB,yBAAKnC,UAAWC,IAAMmC,cACjBV,GAGL,yBAAK1B,UAAWC,IAAMoC,UAClB,6BAAMP,IAGV,kBAAC,EAAD,CAAgBf,SAlBJ,SAACuB,GACjBvC,EAAMwC,YAAYD,EAAOL,qB,gDCtB7BO,EAA6B,SAAChB,GAAD,MAAY,CACzCU,OAAQV,EAAMiB,KAAKP,S,OC+CRQ,sBACXC,aApBkB,SAACnB,GACnB,MAAO,CACHC,YAAaD,EAAMC,gBAIF,SAACmB,GACtB,MAAO,CAIHL,YAAa,SAACN,GACVW,EAASC,YAAmBZ,UDrCR,SAACa,GAAe,IAEtCC,EAFqC,iLAInC,OAAKC,KAAKjD,MAAMmC,OAET,kBAACY,EAAcE,KAAKjD,OAFI,kBAAC,IAAD,CAAUK,GAAI,eAJV,GAEX6C,IAAMH,WAUtC,OAFqCH,YAAQH,EAARG,CAAqCI,KCkC/DL,CAGZnB","file":"static/js/4.b4032b50.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__137z4\",\"dialog\":\"Dialogs_dialog__lFtmd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"DialogsItem_dialog__1eZEQ\",\"activeLink\":\"DialogsItem_activeLink__26hKv\"};","import style from \"./DialogsItem.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\n\r\nconst DialogItem = (props) => {\r\n\r\n    return (\r\n        <div className={style.dialog}>\r\n            <div>\r\n                <img src=\"https://www.vokrug.tv/pic/person/a/c/1/0/ac106ad67ce63e4c52b43f29dc3b1039.jpg\"/>\r\n            </div>\r\n            <NavLink to={\"/dialogs/\" + props.id} className={style.dialog} activeClassName={style.activeLink}>{props.name}</NavLink>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default DialogItem;","import style from \"../Dialogs.module.css\";\r\nimport React from \"react\";\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <div className={style.dialog}>{props.message}</div>\r\n    );\r\n};\r\n\r\nexport default Message;","import {Field, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../Common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport React from \"react\";\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nconst AddMessageForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       validate={[required, maxLength50]}\r\n                       name={\"newMessageBody\"}\r\n                       placeholder=\"Enter your message\"/>\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm({ form: \"dialogAddMessageForm\" }) (AddMessageForm)      // Филды необходимо оборачивать функцией высшего порядка РедаксФорм или они не будут работать. Форма берется из библиотеки Редакс форм.\r\n","import React from \"react\";\r\nimport style from \"./Dialogs.module.css\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport AddMessageForm from \"./AddMessageForm/AddMessageForm\";\r\n\r\n\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let state = props.dialogsPage;     // state определяется, как локальный, и не требует вызова через пропсы\r\n\r\n    let dialogsElements = state.dialogsData.map((dialog) => <DialogItem name={dialog.name} key={dialog.id} id={dialog.id}/>);\r\n    let messageElements = state.messagesData.map((m) => <Message message={m.message} id={m.id} key={m.id}/>);\r\n    let newMessageBody = state.newMessageBody;\r\n\r\n//    let onSendMessageClick = () => {\r\n//        props.sendMassage();\r\n//    };\r\n//    let onNewMessageChange = (e) => {\r\n//        let body = e.target.value;\r\n//        props.updateNewMessageBody(body);\r\n//    };\r\n\r\n    let addNewMessage = (values) => {\r\n        props.sendMassage(values.newMessageBody);\r\n    }\r\n\r\n    if (props.isAuth === false) return <Redirect to={\"/login\"}/> ;\r\n\r\n\r\n       return (\r\n        <div className={style.dialogs}>\r\n\r\n            <div className={style.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n\r\n            <div className={style.messages}>\r\n                <div>{messageElements}</div>\r\n\r\n            </div>\r\n            <AddMessageForm onSubmit={addNewMessage}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to={'/login'}/>    // Альтернативная запись \"this.props.isAuth === false\"\r\n\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect) (RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}","import React from \"react\";\r\nimport {sendMessageCreator} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\n/*const DialogsContainer = (props) => {\r\n\r\n    return (\r\n\r\n        <StoreContext.Consumer>\r\n            {(store) => {\r\n                let state = store.getState().dialogsPage;     // state определяется, как локальный, и не требует вызова через пропсы\r\n\r\n\r\n                let onSendMessageClick = () => {\r\n                    store.dispatch(sendMessageCreator());\r\n                };\r\n                let onNewMessageChange = (body) => {\r\n                    store.dispatch(updateNewMessageBodyCreator(body));\r\n                };\r\n\r\n                return <Dialogs updateNewMessageBody={onNewMessageChange}\r\n                                sendMassage={onSendMessageClick}\r\n                                dialogsPage={state}/>\r\n            }\r\n            }\r\n        </StoreContext.Consumer>\r\n    );\r\n};*/  // контейнерная компонента. Заменили на DialogsContainer\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n//        updateNewMessageBody: (body) =>{\r\n//            dispatch(updateNewMessageBodyCreator(body));\r\n//       },\r\n        sendMassage: (newMessageBody) => {\r\n            dispatch(sendMessageCreator(newMessageBody));\r\n        }\r\n    }\r\n};\r\n\r\n\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n) (Dialogs);"],"sourceRoot":""}
{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogsItem.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","props","className","style","dialog","src","to","id","activeClassName","activeLink","name","Message","message","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","createField","required","Textarea","Dialogs","state","dialogsPage","dialogsElements","dialogsData","map","messageElements","messagesData","m","dialogs","dialogsItems","messages","values","sendMessage","newMessageBody","mapStateToPropsForRedirect","isAuth","auth","compose","connect","actions","WrappedComponent","restProps"],"mappings":"2HACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,OAAS,0B,oBCA9DD,EAAOC,QAAU,CAAC,OAAS,4BAA4B,WAAa,kC,sHCqBrDC,EAbyB,SAACC,GAErC,OACI,sBAAKC,UAAWC,IAAMC,OAAtB,UACI,8BACI,qBAAKC,IAAI,oFAEb,cAAC,IAAD,CAASC,GAAI,YAAcL,EAAMM,GAAIL,UAAWC,IAAMC,OAAQI,gBAAiBL,IAAMM,WAArF,SAAkGR,EAAMS,WCHrGC,EANsB,SAACV,GAClC,OACI,qBAAKC,UAAWC,IAAMC,OAAtB,SAA+BH,EAAMW,W,0BCHvCC,EAAcC,YAAiB,IAoBtBC,cAAoC,CAAEC,KAAM,wBAA5CD,EAdT,SAACd,GACH,OACI,uBAAMgB,SAAUhB,EAAMiB,aAAtB,UACI,8BACKC,YAA0C,qBAAsB,iBAC7D,CAACC,IAAUP,GAAcQ,OAEjC,8BACI,kDCkBDC,EAtBsB,SAACrB,GAClC,IAAIsB,EAAQtB,EAAMuB,YAEdC,EAAkBF,EAAMG,YAAYC,KAAI,SAACvB,GAAD,OAAY,cAAC,EAAD,CAAYM,KAAMN,EAAOM,KAAsBH,GAAIH,EAAOG,IAAtBH,EAAOG,OAC/FqB,EAAkBL,EAAMM,aAAaF,KAAI,SAACG,GAAD,OAAO,cAAC,EAAD,CAASlB,QAASkB,EAAElB,SAAckB,EAAEvB,OAKrF,OACC,sBAAKL,UAAWC,IAAM4B,QAAtB,UACI,qBAAK7B,UAAWC,IAAM6B,aAAtB,SACKP,IAEL,qBAAKvB,UAAWC,IAAM8B,SAAtB,SACI,8BAAML,MAEV,cAAC,EAAD,CAAgBX,SAXJ,SAACiB,GACjBjC,EAAMkC,YAAYD,EAAOE,uB,sCClB7BC,EAA6B,SAACd,GAAD,MAA0B,CACvDe,OAAQf,EAAMgB,KAAKD,S,YCQRE,sBACXC,aAPkB,SAAClB,GACnB,MAAO,CACHC,YAAaD,EAAMC,eAKhB,eAAsBkB,ODC1B,SAAgCC,GAYnC,OAHqCF,YACpCJ,EAA4B,GADQI,EAPiC,SAACxC,GAEnE,IAAKqC,EAAwBrC,EAAxBqC,OAAWM,EAAhB,YAA6B3C,EAA7B,GAEA,OAAKqC,EACE,cAACK,EAAD,eAAsBC,IADT,cAAC,IAAD,CAAUtC,GAAG,gBCR1BkC,CAGZlB","file":"static/js/4.f74129e5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3q-ko\",\"dialog\":\"Dialogs_dialog__1y96X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"DialogsItem_dialog__1wjGU\",\"activeLink\":\"DialogsItem_activeLink__AAzT3\"};","import style from \"./DialogsItem.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\ntype PropsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nconst DialogItem: React.FC<PropsType> = (props) => {\r\n\r\n    return (\r\n        <div className={style.dialog}>\r\n            <div>\r\n                <img src=\"https://www.vokrug.tv/pic/person/a/c/1/0/ac106ad67ce63e4c52b43f29dc3b1039.jpg\"/>\r\n            </div>\r\n            <NavLink to={\"/dialogs/\" + props.id} className={style.dialog} activeClassName={style.activeLink}>{props.name}</NavLink>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default DialogItem;","import style from \"../Dialogs.module.css\";\r\nimport React from \"react\";\r\n\r\ntype PropsType = {\r\n    message: string\r\n}\r\n\r\nconst Message: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={style.dialog}>{props.message}</div>\r\n    );\r\n};\r\n\r\nexport default Message;","import {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, Input, Textarea} from \"../../Common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport React from \"react\";\r\nimport {NewMessageFormValuesType} from \"../Dialogs\";\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\ntype NewMessageFormValuesKeysType = Extract< keyof NewMessageFormValuesType, string >\r\ntype PropsType = {}\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<NewMessageFormValuesType, PropsType> & PropsType>\r\n    = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {createField<NewMessageFormValuesKeysType>(\"Enter your message\", \"newMessageBody\",\r\n                    [required, maxLength50], Textarea)}\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm<NewMessageFormValuesType>({ form: \"dialogAddMessageForm\" }) (AddMessageForm)      // Филды необходимо оборачивать функцией высшего порядка РедаксФорм или они не будут работать. Форма берется из библиотеки Редакс форм.\r\n","import React from \"react\";\r\nimport style from \"./Dialogs.module.css\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport AddMessageForm from \"./AddMessageForm/AddMessageForm\";\r\nimport { InitialStateType } from \"../../redux/dialogs-reducer\";\r\n\r\ntype PropsType = {\r\n    dialogsPage: InitialStateType\r\n    sendMessage: (messageText: string) => void\r\n}\r\n\r\nexport type NewMessageFormValuesType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst Dialogs: React.FC<PropsType> = (props) => {\r\n    let state = props.dialogsPage;     // state определяется, как локальный, и не требует вызова через пропсы\r\n\r\n    let dialogsElements = state.dialogsData.map((dialog) => <DialogItem name={dialog.name} key={dialog.id} id={dialog.id}/>);\r\n    let messageElements = state.messagesData.map((m) => <Message message={m.message} key={m.id}/>);\r\n\r\n    let addNewMessage = (values: NewMessageFormValuesType) => {\r\n        props.sendMessage(values.newMessageBody);\r\n    }\r\n       return (\r\n        <div className={style.dialogs}>\r\n            <div className={style.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={style.messages}>\r\n                <div>{messageElements}</div>\r\n            </div>\r\n            <AddMessageForm onSubmit={addNewMessage}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n} as MapPropsType);\r\n\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\ntype DispatchPropsType = {\r\n}\r\n\r\n\r\nexport function withAuthRedirect<WCP> (WrappedComponent: React.ComponentType<WCP>) {\r\n\r\n    const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to='/login'/>\r\n        return <WrappedComponent {...restProps as  WCP}/>\r\n    }\r\n    let ConnectedAuthRedirectComponent = connect<MapPropsType, DispatchPropsType, WCP, AppStateType>\r\n    (mapStateToPropsForRedirect, {}) (RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}","import React from \"react\";\r\nimport {actions} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {...actions}),\r\n    withAuthRedirect\r\n) (Dialogs)"],"sourceRoot":""}
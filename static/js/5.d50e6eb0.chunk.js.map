{"version":3,"sources":["pages/chat/ChatPage.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js"],"names":["Chat","dispatch","useDispatch","status","useSelector","state","chat","useEffect","startMessagesListening","stopMessagesListening","Messages","obj","TypeError","messages","messagesAnchorRef","useRef","useState","isAutoScroll","setIsAutoScroll","current","scrollIntoView","behavior","style","height","overflowY","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","Message","message","id","ref","React","memo","console","log","src","photo","width","userName","AddMessageForm","setMessage","onChange","value","disabled","onClick","sendMessage","ChatPage"],"mappings":"wMAYMA,EAAiB,WACpB,IAAMC,EAAWC,cAEXC,EAASC,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,UAU/D,OAPAI,qBAAU,WAEP,OADAN,EAASO,eACF,WACJP,EAASQ,kBAEZ,IAEI,gCACQ,UAAXN,GAAsB,+EACvB,qCACG,cAAC,EAAD,IACA,cAAC,EAAD,WAKHO,EAAqB,SAAC,IClCb,SAAmCC,GAChD,GAAW,MAAPA,EAAa,MAAM,IAAIC,UAAU,gCDiCH,IACjC,IAAMC,EAAWT,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKO,YAC3DC,EAAoBC,iBAAuB,MACjD,EAAwCC,oBAAS,GAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KAiBA,OANAX,qBAAU,WACY,IAAD,EAAdU,IACD,UAAAH,EAAkBK,eAAlB,SAA2BC,eAAe,CAACC,SAAU,cAExD,CAACR,IAEG,sBAAKS,MAAO,CAACC,OAAQ,QAASC,UAAW,QAASC,SAfnC,SAACC,GACpB,IAAMC,EAAUD,EAAEE,cACdC,KAAKC,IAAKH,EAAQI,aAAeJ,EAAQK,UAAaL,EAAQM,cAAgB,KAC9EhB,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,IAU/B,UACHL,EAASqB,KAAI,SAACR,GAAD,OAAO,cAACS,EAAD,CAAoBC,QAASV,GAAfA,EAAEW,OACrC,qBAAKC,IAAKxB,QAKVqB,EAAqDI,IAAMC,MAAK,YAAgB,IAAdJ,EAAa,EAAbA,QAErE,OADAK,QAAQC,IAAI,SACL,gCACJ,qBAAKC,IAAKP,EAAQQ,MAAOtB,MAAO,CAACuB,MAAO,UADpC,IAC+C,4BAAIT,EAAQU,WAC/D,uBACCV,EAAQA,QACT,6BAIAW,EAA2B,WAC9B,MAA8B/B,mBAAS,IAAvC,mBAAOoB,EAAP,KAAgBY,EAAhB,KACM/C,EAAWC,cACXC,EAASC,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,UAS/D,OAAO,gCACJ,8BACM,0BAAU8C,SAAU,SAACvB,GAAD,OAAOsB,EAAWtB,EAAEE,cAAcsB,QAC5CA,MAAOd,MAEvB,8BACG,wBAAQe,SAAqB,UAAXhD,EAAoBiD,QAZjB,WACnBhB,IACLnC,EAASoD,YAAYjB,IACrBY,EAAW,MASR,wBAKMM,UAxFY,WACxB,OAAO,8BACJ,cAAC,EAAD","file":"static/js/5.d50e6eb0.chunk.js","sourcesContent":["import React, {useEffect, useRef, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {ChatMessageAPIType} from \"../../API/chat-api\";\r\nimport {sendMessage, startMessagesListening, stopMessagesListening} from \"../../redux/chat-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\nconst ChatPage: React.FC = () => {\r\n   return <div>\r\n      <Chat/>\r\n   </div>\r\n}\r\n\r\nconst Chat: React.FC = () => {\r\n   const dispatch = useDispatch()\r\n\r\n   const status = useSelector((state: AppStateType) => state.chat.status)\r\n\r\n\r\n   useEffect(() => {\r\n      dispatch(startMessagesListening())\r\n      return () => {\r\n         dispatch(stopMessagesListening())\r\n      }\r\n   }, [])\r\n\r\n   return <div>\r\n      {status === 'error' && <div>Some error occurred. Please refresh the page</div>}\r\n      <>\r\n         <Messages/>\r\n         <AddMessageForm/>\r\n      </>\r\n   </div>\r\n}\r\n\r\nconst Messages: React.FC = ({}) => {\r\n   const messages = useSelector((state: AppStateType) => state.chat.messages)\r\n   const messagesAnchorRef = useRef<HTMLDivElement>(null)\r\n   const [isAutoScroll, setIsAutoScroll] = useState(true)\r\n\r\n   const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n      const element = e.currentTarget;\r\n      if (Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) < 300) {\r\n         !isAutoScroll && setIsAutoScroll(true)\r\n      } else {\r\n         isAutoScroll && setIsAutoScroll(false)\r\n      }\r\n   }\r\n\r\n   useEffect(() => {\r\n      if (isAutoScroll) {\r\n         messagesAnchorRef.current?.scrollIntoView({behavior: 'smooth'})\r\n      }\r\n   }, [messages])\r\n\r\n   return <div style={{height: '700px', overflowY: 'auto'}} onScroll={scrollHandler}>\r\n      {messages.map((e) => <Message key={e.id} message={e}/>)}\r\n      <div ref={messagesAnchorRef}/>\r\n   </div>\r\n}\r\n\r\n// eslint-disable-next-line react/display-name\r\nconst Message: React.FC<{ message: ChatMessageAPIType }> = React.memo(({message}) => {\r\n   console.log('>>>>>')\r\n   return <div>\r\n      <img src={message.photo} style={{width: '30px'}}/> <b>{message.userName}</b>\r\n      <br/>\r\n      {message.message}\r\n      <hr/>\r\n   </div>\r\n})\r\n\r\nconst AddMessageForm: React.FC = () => {\r\n   const [message, setMessage] = useState('')\r\n   const dispatch = useDispatch()\r\n   const status = useSelector((state: AppStateType) => state.chat.status)\r\n\r\n\r\n   const sendMessageHandler = () => {\r\n      if (!message) return\r\n      dispatch(sendMessage(message))\r\n      setMessage('')\r\n   }\r\n\r\n   return <div>\r\n      <div>\r\n            <textarea onChange={(e) => setMessage(e.currentTarget.value)}\r\n                      value={message}/>\r\n      </div>\r\n      <div>\r\n         <button disabled={status !== 'ready'} onClick={sendMessageHandler}>Send</button>\r\n      </div>\r\n   </div>\r\n}\r\n\r\nexport default ChatPage","export default function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n}"],"sourceRoot":""}
{"version":3,"sources":["utils/validators/validators.tsx","components/Common/Paginator/Paginator.module.css","API/profile-api.tsx","redux/profil-reducer.tsx","assets/images/user.png","redux/dialogs-reducer.tsx","API/chat-api.tsx","redux/chat-reducer.tsx","components/Users/users.module.css","API/api.tsx","serviceWorker.js","redux/users-selectors.tsx","components/Common/Paginator/Pagenator.tsx","components/Users/User.tsx","utils/objects-helpers.tsx","API/users-api.tsx","redux/users-reducer.tsx","components/Users/UsersSearchForm.tsx","components/Users/Users.tsx","components/Users/UsersContainer.tsx","API/auth-api.tsx","API/security-api.tsx","redux/auth-reducer.tsx","components/Login/loginPage.tsx","redux/app-reducer.tsx","hoc/withSuspense.tsx","redux/sidebar-reducer.tsx","redux/redux-store.tsx","redux/auth-selectors.tsx","components/LoginLogout/LoginLogout.tsx","App.tsx","index.js","components/Common/FormsControls/FormsControls.tsx","assets/images/126.gif","components/Common/Preloader/Preloader.tsx","components/Common/FormsControls/FormControls.module.css"],"names":["required","value","maxLengthCreator","maxLength","length","module","exports","profileAPI","userId","instence","get","then","res","data","status","put","photoFile","formData","FormData","append","headers","profile","initialState","postsData","id","message","likeCount","actions","addPostActionCreator","newPostText","type","setUserProfile","setStatus","deletePost","postId","savePhotoSuccess","photos","getStatus","dispatch","a","updateStatus","resultCode","getUserProfile","savePhoto","file","saveProfile","getState","auth","Error","stopSubmit","_error","messages","Promise","reject","profileReducer","state","action","newPost","filter","p","initialState1","dialogsData","name","messagesData","sendMessage","newMessageBody","dialogsReducer","body","subscribers","ws","messageHandler","e","newMessages","JSON","parse","forEach","s","notifySubscribersAboutStatus","openHandler","errorHandler","console","log","closeHandler","setTimeout","createChannel","cleanUp","close","WebSocket","addEventListener","removeEventListener","chatAPI","eventName","callback","push","send","payload","_newMessageHandler","newMessageHandlerCreator","_statusChangedHandler","statusChangedHandlerCreator","startMessagesListening","stopMessagesListening","chatReducer","map","m","v1","index","array","ResultCodeEnum","ResultCodeForCaptchaEnum","axios","create","withCredentials","baseURL","Boolean","window","location","hostname","match","getUsers","createSelector","usersPage","users","u","getPageSize","pageSize","getTotalUsersCount","totalUsersCount","getCurrentPage","currentPage","getIsFetching","isFetching","getFollowingInProgress","followingInProgress","getUsersFilter","Paginator","totalItemsCount","onPageChanged","portionSize","pageCount","Math","ceil","pages","i","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","className","paginator","onClick","cn","selectedPage","pageNumber","User","user","unfollow","follow","to","src","small","userPhoto","usersPhoto","followed","disabled","some","updateObjectInArray","items","itemId","objPropName","newObjProps","usersAPI","term","friend","post","delete","count","requestUsers","page","totalCount","_followUnfollowFlow","apiMethod","actionCreator","usersReducer","usersSearchFormValidate","values","UsersSearchForm","props","useSelector","enableReinitialize","initialValues","String","validate","onSubmit","setSubmitting","onFilterChanged","isSubmitting","as","MemorizedUsersSearchForm","React","memo","Users","useDispatch","history","useHistory","useEffect","parsed","queryString","search","substr","actualPage","actualFilter","Number","query","pathname","unfollowUser","bind","followUser","UsersPage","pageTitle","Preloader","authAPI","email","password","rememberMe","captcha","securityAPI","login","isAuth","captchaUrl","getAuthUserData","meData","Success","getCaptchaUrl","url","authReducer","LoginReduxForm","reduxForm","form","handleSubmit","error","createField","Input","undefined","formSummaryError","LoginPage","CaptchaIsRequired","initialized","appReducer","withSuspense","WrappedComponent","Suspense","fallback","sidebarReducer","rootReducer","combineReducers","profilePage","dialogsPage","sidebar","formReducer","app","chat","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","reduxStore","createStore","applyMiddleware","thunkMiddleware","__store__","selectIsAuth","selectCurrentUserLogin","LoginLogout","Header","Layout","Content","Footer","Sider","SubMenu","Menu","DialogsContainer","lazy","ProfileContainer","ChatPage","SuspendedDialogs","SuspendedProfile","SuspendedChatPage","App","collapsed","onCollapse","setState","catchAllUnhandlesErrors","alert","this","initializeApp","style","minHeight","collapsible","theme","defaultSelectedKeys","mode","icon","UserOutlined","title","Item","TeamOutlined","SmileOutlined","padding","margin","exact","path","render","textAlign","Component","AppContainer","withRouter","connect","promise","all","MyPetJSApp","store","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","FormControl","meta","touched","children","hasError","formControl","Textarea","input","restProps","placeholder","validators","component","text","preloader"],"mappings":"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","file":"static/js/main.9c0c9854.chunk.js","sourcesContent":["export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n    if (value) return undefined;\r\n    return \"Field is required\";\r\n};\r\n\r\n\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__1BauO\",\"pageNumber\":\"Paginator_pageNumber__3J0KA\",\"selectedPage\":\"Paginator_selectedPage__2knN8\"};","import {PhotosType, ProfileType} from \"../types/types\";\r\nimport {instence, APIResponseType} from \"./api\";\r\n\r\ntype SavePhotoResponseDataType = {\r\n    photos: PhotosType\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return instence.get<ProfileType>(`profile/` + userId).then(res => res.data)\r\n    },\r\n    getStatus(userId: number) {\r\n        return instence.get<string>(`profile/status/` + userId).then(res => res.data)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instence.put<APIResponseType>(`profile/status`, {status: status}).then(res => res.data)\r\n    },\r\n    savePhoto(photoFile: File) {\r\n        let formData = new FormData();\r\n        formData.append(\"image\", photoFile);\r\n\r\n        return instence.put<APIResponseType<SavePhotoResponseDataType>>(`profile/photo`, formData, {\r\n                headers: {\r\n                    'Content-Type': 'multipart/form-data'\r\n                }\r\n            }\r\n        ).then(res => res.data)\r\n    },\r\n\r\n    saveProfile(profile: ProfileType) {\r\n        return instence.put<APIResponseType>(`profile`, profile).then(res => res.data)\r\n    }\r\n};","import {FormAction, stopSubmit} from \"redux-form\";\r\nimport {PhotosType, PostType, ProfileType} from \"../types/types\";\r\nimport {profileAPI} from \"../API/profile-api\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./redux-store\";\r\n\r\nlet initialState = {\r\n    postsData: [\r\n        {id: 1, message: \"Hi\", likeCount: 12},\r\n        {id: 2, message: \"It's my post\", likeCount: 6},\r\n        {id: 3, message: \"Kolya\", likeCount: 5},\r\n        {id: 4, message: \"Petya\", likeCount: 7},\r\n        {id: 5, message: \"Dimoon\", likeCount: 500}\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileType | null,\r\n    status: ''\r\n}\r\n\r\nconst profileReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'mypet/profile/ADD_POST': {\r\n            let newPost = {\r\n                id: 100,\r\n                message: action.newPostText,\r\n                likeCount: 65\r\n            };\r\n            return {\r\n                ...state,\r\n                postsData: [...state.postsData, newPost]\r\n            };    //делается копия объекта state для того, что бы была возможность его перерисовать и не вносились изменения в начальный стейт\r\n            // (стейт который остается неизмененным\r\n            // встроенной в функцию connect не перерисовывается (в connect входит функция subscribe(паттерн observer))).\r\n        }\r\n//        case UPDATE_NEW_POST_TEXT: {\r\n//            return {\r\n//               ...state,\r\n//                newPostText: action.newText,\r\n//            }\r\n//        }\r\n\r\n        case 'mypet/profile/SET_USER_PROFILE': {\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        }\r\n        case 'mypet/profile/SET_STATUS': {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        case 'mypet/profile/DELETE_POST': {\r\n            return {...state, postsData: state.postsData.filter(p => p.id !== action.postId)}\r\n        }\r\n        case 'mypet/profile/SAVE_PHOTO_SUCCESS': {\r\n            return {...state, profile: {...state.profile, photos: action.photos } as ProfileType}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    addPostActionCreator: (newPostText: string) => ({type: 'mypet/profile/ADD_POST', newPostText}as const),\r\n    setUserProfile: (profile: ProfileType) => ({type: 'mypet/profile/SET_USER_PROFILE', profile}as const),\r\n    setStatus: (status: string) => ({type: 'mypet/profile/SET_STATUS', status: status}as const),\r\n    deletePost: (postId: number) => ({type: 'mypet/profile/DELETE_POST', postId}as const),\r\n    savePhotoSuccess: (photos: PhotosType) => ({type: 'mypet/profile/SAVE_PHOTO_SUCCESS', photos} as const)\r\n}\r\n\r\n// Thunks ->\r\n\r\nexport const getStatus = (userId: number): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.getStatus(userId)\r\n    dispatch(actions.setStatus(data));\r\n};\r\n\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.updateStatus(status)\r\n    if (data.resultCode === 0) {\r\n        dispatch(actions.setStatus(status))\r\n    }\r\n};\r\n\r\nexport const getUserProfile = (userId: number): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.getProfile(userId)\r\n    dispatch(actions.setUserProfile(data));\r\n};\r\n\r\nexport const savePhoto = (file: File): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.savePhoto(file);\r\n    if (data.resultCode === 0) {\r\n        dispatch(actions.savePhotoSuccess(data.data.photos));\r\n    }\r\n};\r\n\r\n\r\nexport const saveProfile = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\r\n    const userId = getState().auth.userId;\r\n    let data = await profileAPI.saveProfile(profile);\r\n    if (data.resultCode === 0) {\r\n        if (userId != null) {\r\n            dispatch(getUserProfile(userId))\r\n        } else {\r\n            throw new Error (\"userId can't be null\")\r\n        }\r\n    } else {\r\n        dispatch(stopSubmit(\"edit-profile\", {_error: data.messages[0]}));\r\n        return Promise.reject(data.messages[0]);\r\n    }\r\n}\r\n\r\nexport default profileReducer\r\n\r\nexport type InitialStateType = typeof initialState\r\nexport type ThunkType = BaseThunkType <ActionsType | FormAction>\r\nexport type ActionsType = InferActionsTypes<typeof actions>","export default __webpack_public_path__ + \"static/media/user.22a9e1ed.png\";","import {InferActionsTypes} from \"./redux-store\";\r\n\r\n\r\nlet initialState1 = {\r\n    dialogsData: [\r\n        {id: 1, name: \"Dimon\"},\r\n        {id: 2, name: \"Dimoon\"},\r\n        {id: 3, name: \"Dimoooon\"},\r\n        {id: 4, name: \"Kolya\"},\r\n        {id: 5, name: \"Petya\"}\r\n    ] as Array<DialogType>,\r\n    messagesData: [\r\n        {id: 1, message: \"Hi\"},\r\n        {id: 2, message: \"Hello\"},\r\n        {id: 3, message: \"hello, hi!\"}\r\n    ] as Array<MessagesType>,\r\n}\r\n\r\nexport const actions = {\r\n    sendMessage: (newMessageBody: string) =>\r\n        ({type: 'mypet/dialogs/SEND_MESSAGE', newMessageBody} as const),\r\n}\r\n\r\nconst dialogsReducer = (state = initialState1, action: ActionsType):\r\n    InitialStateType => {\r\n    switch (action.type) {\r\n        case 'mypet/dialogs/SEND_MESSAGE':\r\n            let body = action.newMessageBody;\r\n            return {\r\n                ...state,\r\n                messagesData: [...state.messagesData, {id: 6, message: body}],\r\n                //спред оператор создает копию примитивов.\r\n                // Что бы скопировать массив на более глубоком уровне, отдельные объекты, массивы копируются отдельно.\r\n                // Вместо Push, новый элемент дописывается справа (слева, если нужно)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default dialogsReducer;\r\n\r\nexport type InitialStateType = typeof initialState1\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype DialogType = {\r\n    id: number\r\n    name: string\r\n}\r\ntype MessagesType = {\r\n    id: number\r\n    message: string\r\n}","\r\nlet subscribers = {\r\n    'message-received': [] as MessagesReceivedSubscriberType[],\r\n    'status-changed': [] as StatusChangedSubscriberType[]\r\n}\r\n\r\nlet ws:WebSocket | null = null\r\ntype EventsNamesType = 'message-received' | 'status-changed'\r\n\r\n\r\nconst messageHandler = (e: MessageEvent) => {\r\n    let newMessages = JSON.parse(e.data)\r\n    subscribers['message-received'].forEach(s => s(newMessages))\r\n}\r\n\r\nconst notifySubscribersAboutStatus = (status: StatusType) => {\r\n    subscribers['status-changed'].forEach(s => s(status))\r\n}\r\nconst openHandler = () => {\r\n    notifySubscribersAboutStatus('ready')\r\n}\r\nconst errorHandler = () => {\r\n    notifySubscribersAboutStatus('error')\r\n    console.log('Refresh page')\r\n}\r\nconst closeHandler = () => {\r\n    console.log('CLOSE WS')\r\n    notifySubscribersAboutStatus('pending')\r\n    setTimeout( createChannel, 2000);\r\n}\r\nfunction createChannel() {\r\n    cleanUp()\r\n    ws?.close()\r\n    ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\r\n    notifySubscribersAboutStatus('pending')\r\n    ws.addEventListener('close', closeHandler)\r\n    ws.addEventListener('message', messageHandler)\r\n    ws.addEventListener('open', openHandler)\r\n    ws.addEventListener('error', errorHandler)\r\n    console.log('WS connect')\r\n}\r\nconst cleanUp = () => {\r\n    ws?.removeEventListener('close', closeHandler)\r\n    ws?.removeEventListener('message', messageHandler)\r\n    ws?.removeEventListener('open', openHandler)\r\n    ws?.removeEventListener('error', errorHandler)\r\n}\r\n\r\n\r\nexport const chatAPI = {\r\n    start() {\r\n        createChannel()\r\n    },\r\n    stop() {\r\n        subscribers['message-received'] = []\r\n        subscribers['status-changed'] = []\r\n        cleanUp()\r\n        ws?.close()\r\n    },\r\n    subscribeOnNewMessages(eventName: EventsNamesType,\r\n                           callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {       // subscribe уже имеет возможность сделать отписку потому, что возвращает callback функцию, которая производит отписку\r\n        // @ts-ignore\r\n        subscribers[eventName].push(callback)\r\n        return () => {\r\n            // @ts-ignore\r\n            subscribers[eventName] = subscribers[eventName].filter(s => s !== callback)\r\n        }\r\n    },\r\n    unsubscribeFromNewMessages(eventName: EventsNamesType,\r\n                               callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {       // альтернативная функция функции callback в subscribe делает по сути такую же отписку\r\n        // @ts-ignore\r\n        subscribers[eventName] = subscribers[eventName].filter(s => s !== callback)\r\n    },\r\n    sendMessage(message: string) {\r\n        ws?.send(message)\r\n    }\r\n}\r\n\r\n\r\ntype MessagesReceivedSubscriberType = (messages: ChatMessageAPIType[]) => void\r\ntype StatusChangedSubscriberType = (status: StatusType) => void\r\n\r\nexport type ChatMessageAPIType = {\r\n    message: string,\r\n    photo:string,\r\n    userId: number,\r\n    userName: string\r\n}\r\n\r\nexport type StatusType = 'pending' | 'ready' | 'error'","import {BaseThunkType, InferActionsTypes} from \"./redux-store\";\r\nimport {chatAPI, ChatMessageAPIType, StatusType} from \"../API/chat-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {FormAction} from 'redux-form/lib/actions'\r\nimport {v1} from \"uuid\";\r\n\r\n\r\n\r\nlet initialState = {\r\n   messages: [] as ChatMessageType[],\r\n   status: 'pending' as StatusType\r\n}\r\ntype ChatMessageType = ChatMessageAPIType & {id: string}\r\n\r\nconst chatReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n   switch (action.type) {\r\n      case 'firstPet/chat/MESSAGES_RECEIVED':\r\n         return {\r\n            ...state,\r\n            messages: [...state.messages, ...action.payload.messages.map( m => ({...m, id: v1() }))]\r\n               .filter((m, index, array) => index >= array.length - 100)\r\n         }\r\n      case 'firstPet/chat/STATUS_CHANGED':\r\n         return {\r\n            ...state,\r\n            status: action.payload.status\r\n         }\r\n      default:\r\n         return state;\r\n   }\r\n}\r\n\r\nexport const actions = {\r\n   messagesReceived: (messages: ChatMessageAPIType[]) => ({\r\n      type: 'firstPet/chat/MESSAGES_RECEIVED',\r\n      payload: {messages}\r\n   } as const),\r\n   statusChanged: (status: StatusType) => ({\r\n      type: 'firstPet/chat/STATUS_CHANGED',\r\n      payload: {status}\r\n   } as const)\r\n}\r\nlet _newMessageHandler: ((messages: ChatMessageAPIType[]) => void) | null = null\r\nconst newMessageHandlerCreator = (dispatch: Dispatch) => {\r\n   if (_newMessageHandler === null) {\r\n      _newMessageHandler = (messages) => {\r\n         dispatch(actions.messagesReceived(messages))\r\n      }\r\n   }\r\n   return _newMessageHandler\r\n}\r\n\r\nlet _statusChangedHandler: ((status: StatusType) => void) | null = null\r\nconst statusChangedHandlerCreator = (dispatch: Dispatch) => {\r\n   if (_statusChangedHandler === null) {\r\n      _statusChangedHandler = (status) => {\r\n         dispatch(actions.statusChanged(status))\r\n      }\r\n   }\r\n   return _statusChangedHandler\r\n}\r\n\r\nexport const startMessagesListening = (): ThunkType => async (dispatch) => {\r\n   chatAPI.start()\r\n   chatAPI.subscribeOnNewMessages('message-received', newMessageHandlerCreator(dispatch))\r\n   chatAPI.subscribeOnNewMessages('status-changed', statusChangedHandlerCreator(dispatch))\r\n}\r\nexport const stopMessagesListening = (): ThunkType => async (dispatch) => {\r\n   chatAPI.unsubscribeFromNewMessages('message-received', newMessageHandlerCreator(dispatch))\r\n   chatAPI.unsubscribeFromNewMessages('status-changed', statusChangedHandlerCreator(dispatch))\r\n   chatAPI.stop()\r\n};\r\nexport const sendMessage = (message: string): ThunkType => async (dispatch) => {\r\n   chatAPI.sendMessage(message)\r\n};\r\n\r\nexport default chatReducer\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>","// extracted by mini-css-extract-plugin\nmodule.exports = {\"usersPhoto\":\"users_usersPhoto__2t0Ys\"};","import axios from \"axios\";\r\nimport {UserType} from \"../types/types\";\r\n\r\nexport type APIResponseType<D = {}, RC = ResultCodeEnum> = {           // Общий тип - дженерик.\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RC\r\n}\r\n\r\n\r\nexport const instence = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"API-KEY\": \"ecf4e46f-deda-4b1c-8f3a-4727ea1a9575\"\r\n    }\r\n});\r\n\r\nexport enum ResultCodeEnum {       // Специальный тип при возврате ошибки числом с сервера превращает его в слово, для облегчения дебага\r\n    Success = 0,\r\n    Error = 1,\r\n}\r\n\r\nexport enum ResultCodeForCaptchaEnum {\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\nexport type GetItemsType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {createSelector} from \"reselect\";\r\nimport {AppStateType} from \"./redux-store\";\r\n\r\nconst getUsersSelector = (state: AppStateType) => {\r\n    return state.usersPage.users;\r\n}\r\n\r\nexport const getUsers = createSelector( getUsersSelector,\r\n    (users) => {\r\n\r\n    return users.filter(u => true);\r\n})\r\n\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize;\r\n}\r\n\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount;\r\n}\r\n\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage;\r\n}\r\n\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching;\r\n}\r\n\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress;\r\n}\r\n\r\nexport const getUsersFilter = (state: AppStateType) => {\r\n    return state.usersPage.filter;\r\n}","import React, {useState} from \"react\"\r\nimport s from \"./Paginator.module.css\"\r\nimport cn from \"classnames\"\r\n\r\ntype PropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage?: number\r\n    onPageChanged?: (pageNumber: number) => void\r\n    portionSize?: number\r\n}\r\n\r\nlet Paginator: React.FC<PropsType> = ({totalItemsCount,\r\n                                          pageSize,\r\n                                          currentPage = 1,\r\n                                          onPageChanged = () => {},\r\n                                          portionSize = 10}) => {\r\n\r\n    let pageCount = Math.ceil(totalItemsCount / pageSize);\r\n\r\n    let pages: Array<number> = [];\r\n\r\n    for (let i = 1; i <= pageCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    let portionCount = Math.ceil(pageCount / portionSize);\r\n    let [portionNumber, setPortionNumber] = useState<number>(1);   // useState - функция дженерик и ее можно уточнять\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n\r\n    return <div className={s.paginator}>\r\n        { portionNumber > 1 &&\r\n        <button onClick={ () => { setPortionNumber(portionNumber - 1) }}>PREV</button>}\r\n\r\n        {pages\r\n            .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber )\r\n            .map((p) => {\r\n            return <span\r\n                className={ cn({\r\n                [s.selectedPage]: currentPage === p}, s.pageNumber) }\r\n                    key={p}\r\n                onClick={(e) => {\r\n                    onPageChanged(p)\r\n                }}> {p} </span>\r\n        })}\r\n        { portionCount > portionNumber &&\r\n            <button onClick={() => {setPortionNumber(portionNumber + 1)}}>NEXT</button> }\r\n    </div>\r\n}\r\n\r\n\r\nexport default Paginator;\r\n","import React from \"react\";\r\nimport s from \"./users.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport userPhoto from '../../../src/assets/images/user.png';\r\nimport {UserType} from \"../../types/types\";\r\n\r\ntype PropsType = {\r\n    user: UserType\r\n    followingInProgress: Array<number>\r\n    unfollow: (userId: number) => void\r\n    follow: (userId: number) => void\r\n}\r\n\r\nlet User: React.FC<PropsType> = ({user, followingInProgress, unfollow, follow}) => {\r\n\r\n    return (\r\n        <div>\r\n            <span>\r\n                    <div>\r\n                        <NavLink to={'/profile/' + user.id}>\r\n                        <img src={user.photos.small != null ? user.photos.small :\r\n                            userPhoto} className={s.usersPhoto}/>\r\n                        </NavLink>\r\n                        </div>\r\n                    <div>\r\n                        {user.followed\r\n                            ? <button disabled={followingInProgress\r\n                                .some(id => id === user.id)}\r\n                                      onClick={() => {\r\n                                          unfollow(user.id)\r\n                                      }}>\r\n                                Unfollow</button>\r\n\r\n                            : <button disabled={followingInProgress.some(id => id === user.id)}\r\n                                      onClick={() => {\r\n                                          follow(user.id)\r\n                                      }}>\r\n                                Follow</button>}\r\n\r\n\r\n                                </div>\r\n                                </span>\r\n                <span>\r\n                                <span>\r\n                                <div>{user.name}</div>\r\n                                <div>{user.status}</div>\r\n                                </span>\r\n                                <span>\r\n                                <div>{\"u.location.country\"}</div>\r\n                                <div>{\"u.location.city\"}</div>\r\n                                </span>\r\n                                </span>\r\n            </div>)\r\n}\r\n\r\nexport default User;","export const updateObjectInArray = (items: any, itemId: any, objPropName: any, newObjProps: any) => {\r\n    return items.map((u: any) => {\r\n        if (u[objPropName] === itemId) {\r\n            return {...u, ...newObjProps}\r\n        }\r\n        return u;\r\n    })\r\n}","import {GetItemsType, instence, APIResponseType} from \"./api\";\r\n\r\n\r\n\r\nexport const usersAPI = {\r\n    getUsers (currentPage = 1, pageSize = 10, term: string = '', friend: null | boolean = null) {\r\n        return instence.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend === null ? '' : `&friend=${friend}` ))\r\n            .then(res => res.data)\r\n    },\r\n\r\n    follow(userId: number) {\r\n        return instence.post<APIResponseType>(`follow/${userId}`).then(res => res.data)\r\n    },\r\n    unfollow(userId: number) {\r\n        return instence.delete(`follow/${userId}`).then(res => res.data) as Promise<APIResponseType>\r\n    }\r\n};","import {updateObjectInArray} from \"../utils/objects-helpers\";\r\nimport {UserType} from \"../types/types\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {usersAPI} from \"../API/users-api\";\r\nimport {APIResponseType} from \"../API/api\";\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,       // Для прелодера\r\n    followingInProgress: [] as Array<number>,        //Array of users ID\r\n    filter: {\r\n        term: '',\r\n        friend: null as null | boolean\r\n    }\r\n}\r\nconst usersReducer = (state = initialState, action: ActionsType): InitialState => {\r\n    switch (action.type) {\r\n        case 'mypet/users/FOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: true})\r\n            }\r\n        case 'mypet/users/UNFOLLOW':        // Unfollow - неотрефекореная функция, для примера.\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u;\r\n                }),\r\n            }\r\n        case 'mypet/users/SET_USERS': {\r\n            return {...state, users: action.users}\r\n        }\r\n        case 'mypet/users/SET_CURRENT_PAGE': {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case 'mypet/users/SET_TOTAL_USERS_COUNT': {\r\n            return {...state, totalUsersCount: action.count}\r\n        }\r\n        case 'mypet/users/SET_FILTER': {\r\n            return {...state, filter: action.payload}\r\n        }\r\n        case 'mypet/users/TOGGLE_IS_FETCHING': {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case 'mypet/users/TOGGLE_IS_FOLLOWING_PROGRESS': {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id != action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    followSuccess: (userId: number) => ({type: 'mypet/users/FOLLOW', userId} as const),\r\n    unfollowSuccess: (userId: number) => ({type: 'mypet/users/UNFOLLOW', userId} as const),\r\n    setUsers: (users: Array<UserType>) => ({type: 'mypet/users/SET_USERS', users} as const),\r\n    setCurrentPage: (currentPage: number) => ({\r\n        type: 'mypet/users/SET_CURRENT_PAGE',\r\n        currentPage: currentPage\r\n    } as const),\r\n    setFilter: (filter: FilterType) => ({type: 'mypet/users/SET_FILTER', payload: filter} as const),\r\n    setTotalUsersCount: (totalUsersCount: number) => ({\r\n        type: 'mypet/users/SET_TOTAL_USERS_COUNT',\r\n        count: totalUsersCount\r\n    } as const),\r\n    toggleIsFetching: (isFetching: boolean) => ({type: 'mypet/users/TOGGLE_IS_FETCHING', isFetching} as const),\r\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => ({\r\n        type: 'mypet/users/TOGGLE_IS_FOLLOWING_PROGRESS',\r\n        isFetching,\r\n        userId\r\n    } as const)\r\n}\r\n\r\n\r\n//thunk\r\n\r\nexport const requestUsers = (page: number, pageSize: number, filter: FilterType): ThunkType => {        //getUsersThunkCreator\r\n    return async (dispatch) => {      // Типизация Dispatch берется из библиотеки редакс. Данная типизация аналогична той, которая оформлена в ThunkType ( официальный способ)\r\n        dispatch(actions.toggleIsFetching(true));\r\n        dispatch(actions.setCurrentPage(page))\r\n        dispatch(actions.setFilter(filter))\r\n\r\n        let data = await usersAPI.getUsers(page, pageSize, filter.term, filter.friend)\r\n\r\n        dispatch(actions.toggleIsFetching(false));\r\n        dispatch(actions.setUsers(data.items));\r\n        dispatch(actions.setTotalUsersCount(data.totalCount));\r\n\r\n    }\r\n}\r\n\r\nconst _followUnfollowFlow = async (dispatch: Dispatch<ActionsType>,\r\n                                   userId: number,\r\n                                   apiMethod: (userID: number) => Promise<APIResponseType>,\r\n                                   actionCreator: (userId: number) => ActionsType) => {\r\n    dispatch(actions.toggleFollowingProgress(true, userId));\r\n    let response = await apiMethod(userId)\r\n\r\n    if (response.resultCode == 0) {\r\n        dispatch(actionCreator(userId));\r\n    }\r\n    dispatch(actions.toggleFollowingProgress(false, userId));\r\n}\r\n\r\n\r\nexport const follow = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        await _followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), actions.followSuccess);\r\n    }\r\n}\r\n\r\nexport const unfollow = (userId: number): ThunkType => {\r\n\r\n    return async (dispatch) => {    //Unfolow - неотрефакторенный вариант, для примера\r\n        let apiMethod = usersAPI.unfollow.bind(usersAPI);\r\n        let actionCreator = actions.unfollowSuccess;\r\n        await _followUnfollowFlow(dispatch, userId, apiMethod, actionCreator)\r\n    }\r\n}\r\n\r\nexport default usersReducer\r\n\r\n\r\nexport type InitialState = typeof initialState\r\nexport type FilterType = typeof initialState.filter\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType>","import {Field, Form, Formik} from \"formik\";\r\nimport React from \"react\";\r\nimport { FilterType } from \"../../redux/users-reducer\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getUsersFilter} from \"../../redux/users-selectors\";\r\n\r\nconst usersSearchFormValidate = (values: any) => {\r\n    const errors = {}\r\n    return errors;\r\n}\r\n\r\ntype FriendFormType = 'true' | 'false' | 'null'\r\n\r\ntype FormType = {\r\n    term: string,\r\n    friend: FriendFormType\r\n}\r\n\r\ntype PropsType = {\r\n    onFilterChanged: (filter: FilterType) => void\r\n}\r\n\r\nconst UsersSearchForm: React.FC<PropsType> = (props ) => {\r\n\r\n    const filter = useSelector(getUsersFilter)\r\n\r\n    const submit = (values: FormType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\r\n        const filter: FilterType = {\r\n            term: values.term,\r\n            friend: values.friend === 'null' ? null : values.friend === 'true'\r\n        }\r\n        props.onFilterChanged(filter)\r\n        setSubmitting(false)\r\n    }\r\n\r\n    return <div>\r\n        <Formik\r\n            enableReinitialize={true}\r\n            initialValues={{term: filter.term, friend: String(filter.friend) as FriendFormType}}\r\n            validate={usersSearchFormValidate}\r\n            onSubmit={submit}\r\n        >\r\n            {({isSubmitting}) => (\r\n                <Form>\r\n                    <Field type=\"text\" name=\"term\"/>\r\n                    <Field name=\"friend\" as=\"select\">\r\n                        <option value=\"null\">All</option>\r\n                        <option value=\"true\">Only followed</option>\r\n                        <option value=\"false\">Only unfollowed</option>\r\n                    </Field>\r\n                    <button type=\"submit\" disabled={isSubmitting}>\r\n                        Find\r\n                    </button>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    </div>\r\n}\r\n\r\nexport const MemorizedUsersSearchForm = React.memo(UsersSearchForm)","import React, {useEffect} from \"react\";\r\nimport Paginator from \"../Common/Paginator/Pagenator\";\r\nimport User from \"./User\";\r\nimport {FilterType, follow, requestUsers, unfollow} from \"../../redux/users-reducer\";\r\nimport {MemorizedUsersSearchForm} from \"./UsersSearchForm\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers,\r\n    getUsersFilter\r\n} from \"../../redux/users-selectors\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport * as queryString from \"querystring\";\r\n\r\ntype PropsType = {\r\n}\r\ntype QueryParamsType = { term?: string; page?: string; friend?: string }\r\n\r\nexport const Users: React.FC<PropsType> = () => {\r\n\r\n    const users = useSelector(getUsers)\r\n    const totalUsersCount = useSelector(getTotalUsersCount)\r\n    const currentPage = useSelector(getCurrentPage)\r\n    const pageSize = useSelector(getPageSize)\r\n    const filter = useSelector(getUsersFilter)\r\n    const followingInProgress = useSelector(getFollowingInProgress)\r\n\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        const parsed = queryString.parse(history.location.search\r\n            .substr(1)) as QueryParamsType\r\n\r\n        let actualPage = currentPage\r\n        let actualFilter = filter\r\n        if(parsed.page) actualPage = Number(parsed.page)\r\n        if(parsed.term) actualFilter = {...actualFilter, term: parsed.term as string }\r\n        switch(parsed.friend) {\r\n            case 'null' :\r\n                actualFilter = {...actualFilter, friend: null}\r\n                break\r\n            case 'true':\r\n                actualFilter = {...actualFilter, friend: true}\r\n                break\r\n            case 'false':\r\n                actualFilter = {...actualFilter, friend: false}\r\n                break\r\n        }\r\n        dispatch(requestUsers(actualPage, pageSize, actualFilter))\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const query: QueryParamsType = {}\r\n        if (!!filter.term) query.term = filter.term\r\n        if (filter.friend !== null) query.friend = String(filter.friend)\r\n        if (currentPage !== 1) query.page = String(currentPage)\r\n\r\n\r\n        history.push({\r\n            pathname: '/developers',\r\n            search: queryString.stringify(query)\r\n        })\r\n    }, [filter, currentPage])\r\n\r\n    const onFilterChanged = (filter: FilterType) => {\r\n        dispatch(requestUsers(1, pageSize, filter))\r\n    }\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(requestUsers(pageNumber, pageSize, filter))\r\n    }\r\n\r\n    const unfollowUser = (userId: number) => {\r\n        dispatch(unfollow(userId))\r\n    }\r\n    const followUser = (userId: number) => {\r\n        dispatch(follow(userId))\r\n    }\r\n\r\n    return <div>\r\n        <MemorizedUsersSearchForm onFilterChanged={onFilterChanged}/>\r\n\r\n\r\n        < Paginator currentPage={currentPage}\r\n                    onPageChanged={onPageChanged}\r\n                    totalItemsCount={totalUsersCount}\r\n                    pageSize={pageSize}/>\r\n        <div>\r\n            {\r\n                users.map(u => <User user={u}\r\n                                     key={u.id}\r\n                                     followingInProgress={followingInProgress}\r\n                                     unfollow={unfollowUser}\r\n                                     follow={followUser}\r\n                />)\r\n            }\r\n        </div>\r\n    </div>\r\n}","import React from 'react';\r\nimport {useSelector} from \"react-redux\";\r\nimport Preloader from \"../Common/Preloader/Preloader\";\r\nimport {getIsFetching} from \"../../redux/users-selectors\";\r\nimport {Users} from \"./Users\";\r\n\r\ntype UsersPagePropsType = {\r\n    pageTitle: string\r\n}\r\n\r\nexport const UsersPage: React.FC<UsersPagePropsType> = (props) => {\r\n\r\n    const isFetching = useSelector(getIsFetching)\r\n\r\n    return <>\r\n        <h2>{props.pageTitle}</h2>\r\n        {isFetching ? <Preloader/> : null}\r\n        <Users/>\r\n    </>\r\n}\r\n","import {instence, APIResponseType, ResultCodeEnum, ResultCodeForCaptchaEnum} from \"./api\";\r\n\r\ntype MeResponseType = {\r\n        id: number\r\n        email: string\r\n        login: string\r\n}\r\n\r\ntype LoginResponseType = {\r\n        userId: number\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instence.get<APIResponseType<MeResponseType>>(`auth/me`).then(res => res.data)         // Любой запрос (get post put delete) является дженериком и его тип можно задавать вручную\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean = false, captcha: null | string = null) {\r\n        return instence.post<APIResponseType<LoginResponseType, ResultCodeEnum | ResultCodeForCaptchaEnum>>(`auth/login`, {email, password, rememberMe, captcha})\r\n            .then(res => res.data)\r\n    },\r\n    logout() {\r\n        return instence.delete(`auth/login`);\r\n    }\r\n}","import {instence} from \"./api\";\r\n\r\ntype GetCatpchaUrlResponseType = {\r\n    url: string\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instence.get<GetCatpchaUrlResponseType>(`security/get-captcha-url`).then(res => res.data)\r\n    },\r\n};","import {stopSubmit} from \"redux-form\";\r\nimport {ResultCodeEnum, ResultCodeForCaptchaEnum} from \"../API/api\";\r\nimport {authAPI} from \"../API/auth-api\";\r\nimport {securityAPI} from \"../API/security-api\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./redux-store\";\r\nimport {Action, Dispatch} from \"redux\";\r\n\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | ReturnType<typeof stopSubmit>>\r\n\r\nlet initialState = {\r\n    userId: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    captchaUrl: null as string | null      // If null, then captcha is not required\r\n};\r\n  // тайпскрипт берет в качестве типа initialState\r\n\r\nconst authReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'firstPet/auth/SET_USER_DATA':                     // Сокращенная форма для случаев, когда код одинаковый.\r\n        case 'firstPet/auth/GET_CAPTCHA_URL_SUCCESS':\r\n\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setAuthUserData: (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\r\n        type: 'firstPet/auth/SET_USER_DATA',\r\n        payload: {userId, email, login, isAuth}\r\n    }as const),\r\n    getCaptchaUrlSuccess: (captchaUrl: string) => ({\r\n        type: 'firstPet/auth/GET_CAPTCHA_URL_SUCCESS',\r\n        payload: {captchaUrl}\r\n    }as const),\r\n}\r\n\r\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n    let meData = await authAPI.me();\r\n\r\n    if (meData.resultCode === ResultCodeEnum.Success) {\r\n        let {id, login, email} = meData.data;\r\n        dispatch(actions.setAuthUserData(id, email, login, true));\r\n    }\r\n};\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string ): ThunkType =>\r\n    async (dispatch) => {\r\n\r\n    let data = await authAPI.login(email, password, rememberMe, captcha);\r\n    if (data.resultCode === ResultCodeEnum.Success) {\r\n        dispatch(getAuthUserData())\r\n    } else {\r\n     if (data.resultCode === ResultCodeForCaptchaEnum.CaptchaIsRequired) {\r\n         dispatch(getCaptchaUrl());\r\n     }\r\n        let message = data.messages.length > 0 ? data.messages [0] : \"Some error\";\r\n        dispatch(stopSubmit(\"login\", {_error: message}));\r\n    }\r\n};\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n\r\n    const data = await securityAPI.getCaptchaUrl();\r\n    const captchaUrl = data.url;\r\n    dispatch(actions.getCaptchaUrlSuccess(captchaUrl));\r\n};\r\n\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n    let response = await authAPI.logout();\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(actions.setAuthUserData(null, null, null,false))}\r\n};\r\n\r\nexport default authReducer;\r\n\r\n","import React from \"react\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, GetStringKeys, Input} from \"../Common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport { useDispatch, useSelector} from \"react-redux\";\r\nimport s from \"../../components/Common/FormsControls/FormControls.module.css\"\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\ntype LoginFormOwnProps = {\r\n    captchaUrl: string | null\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps> =\r\n    ({handleSubmit, error, captchaUrl}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField<LoginFormValuesTypeKeys>(\"Email\", \"email\", [required], Input)}\r\n            {createField<LoginFormValuesTypeKeys>(\"Password\", \"password\", [required], Input, {type: \"password\"})}\r\n            {createField<LoginFormValuesTypeKeys>(undefined, \"rememberMe\", [], Input, {type: \"checkbox\"}, \"remember me\")}\r\n\r\n            {captchaUrl && <img src={captchaUrl}/>}\r\n            {captchaUrl && createField<LoginFormValuesTypeKeys>(\"Symbols from image\", \"captcha\", [required], Input, )}\r\n\r\n            {error && <div className={s.formSummaryError}>\r\n                {error}\r\n            </div>\r\n            }\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({form: 'login'})(LoginForm);        // Создает новую форму в стейте с названием login\r\n\r\nexport type LoginFormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\nexport type LoginFormValuesTypeKeys = GetStringKeys< LoginFormValuesType>\r\n\r\nexport const LoginPage: React.FC = () => {\r\n    const captchaUrl = useSelector((state: AppStateType) => state.auth.captchaUrl)\r\n    const isAuth = useSelector((state: AppStateType) => state.auth.isAuth)\r\n    const dispatch = useDispatch()\r\n\r\n    const onSubmit = (formData: LoginFormValuesType) => {\r\n        dispatch(login(formData.email, formData.password, formData.rememberMe, formData.captcha))\r\n    }\r\n    if (isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n    return <div>\r\n        <h1>Login</h1>\r\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl}/>\r\n    </div>\r\n}","import {getAuthUserData} from \"./auth-reducer\";\r\nimport {InferActionsTypes} from \"./redux-store\";\r\n\r\nlet initialState = {\r\n    initialized: false\r\n};\r\nexport type InitialStateType = typeof initialState\r\nexport type ActionsType = InferActionsTypes<typeof actions>\r\n\r\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/APP/INITIALIZED_SUCCESS':\r\n\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    initializedSuccess: () => ({type: 'SN/APP/INITIALIZED_SUCCESS'} as const)\r\n}\r\n\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    let promise = dispatch(getAuthUserData());\r\n    Promise.all([promise])              // когда будет много промисов, запуск диспатча произойдет только после того, как все они будут обработаны\r\n        .then(() => {\r\n            dispatch(actions.initializedSuccess());\r\n        });\r\n};\r\n\r\n\r\nexport default appReducer;","/* eslint-disable */\r\nimport React from 'react';\r\nimport Preloader from \"../components/Common/Preloader/Preloader\";\r\n\r\nexport function withSuspense <WCP> (WrappedComponent: React.ComponentType<WCP>) {\r\n    return (props: WCP) => {\r\n        return <React.Suspense fallback={<Preloader />}>\r\n            <WrappedComponent {...props} />\r\n            </React.Suspense>\r\n    }\r\n}","let initialState = {};\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const sidebarReducer = (state = initialState, action: any): InitialStateType => {\r\n\r\n    return state;\r\n\r\n}\r\n\r\nexport default sidebarReducer;","import {Action, applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport profileReducer from \"./profil-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport { reducer as formReducer } from \"redux-form\";\r\nimport appReducer from \"./app-reducer\";\r\nimport chatReducer from \"./chat-reducer\";        // Импорт специальногй редюсор формы из библиотеки форм. Добавляется единожды в основной стор.\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer,\r\n    chat: chatReducer\r\n});\r\n\r\ntype RootReducerType = typeof rootReducer; // (globalstate: GLOBALSTATE) => AppStateType\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\n// https://habr.com/ru/company/alfa/blog/452620/\r\nexport type InferActionsTypes<T> = T extends {[key: string]: (...arg: any[]) => infer U} ? U : never\r\n\r\n// AT - actions type дженерик. Для каждого типа редюсоров будет приходить свой тип.\r\n// R - возвращаемое значение (Promise)\r\nexport type BaseThunkType <A extends Action = Action, R = Promise<void>> = ThunkAction <R, AppStateType, unknown, A>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\nconst reduxStore = createStore(rootReducer,  composeEnhancers(applyMiddleware(thunkMiddleware)))\r\n\r\n// @ts-ignore\r\nwindow.__store__ = reduxStore\r\n\r\nexport default reduxStore","import {AppStateType} from \"./redux-store\";\r\n\r\nexport const selectIsAuth = (state: AppStateType) => {\r\n    return state.auth.isAuth\r\n}\r\nexport const selectCurrentUserLogin = (state: AppStateType) => {\r\n    return state.auth.login\r\n}\r\n\r\n","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport {Button, Row } from 'antd';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {selectCurrentUserLogin, selectIsAuth} from '../../redux/auth-selectors';\r\nimport {logout} from \"../../redux/auth-reducer\";\r\n\r\n\r\nexport const LoginLogout: React.FC = (props) => {\r\n\r\n    const isAuth = useSelector(selectIsAuth)\r\n    const login = useSelector(selectCurrentUserLogin)\r\n\r\n    const dispatch = useDispatch()\r\n    const logoutCallback = () => {\r\n        dispatch(logout())\r\n    }\r\n\r\n    return <Row>\r\n        { isAuth ? <div>{login}  <Button onClick={logoutCallback}>Log out</Button> </div>\r\n            : <Button><Link to={'/login'}>Login</Link></Button>}\r\n    </Row>\r\n}","import React, {Component} from \"react\";\nimport './App.css';\nimport {HashRouter, Link, Redirect, Route, Switch, withRouter} from \"react-router-dom\";\nimport {UsersPage} from \"./components/Users/UsersContainer\";\nimport {LoginPage} from \"./components/Login/loginPage\"\nimport {connect, Provider} from \"react-redux\";\nimport {compose} from \"redux\";\nimport {initializeApp} from \"./redux/app-reducer\";\nimport Preloader from \"./components/Common/Preloader/Preloader\";\nimport {withSuspense} from \"./hoc/withSuspense\";\nimport reduxStore, {AppStateType} from \"./redux/redux-store\";\nimport 'antd/dist/antd.css'\nimport {Layout, Menu} from 'antd';\nimport {SmileOutlined, TeamOutlined, UserOutlined,} from '@ant-design/icons';\nimport {LoginLogout} from \"./components/LoginLogout/LoginLogout\";\n\n\nconst {Header, Content, Footer, Sider} = Layout;\nconst {SubMenu} = Menu;\n\nconst DialogsContainer = React.lazy(() => import(\"./components/Dialogs/DialogsContainer\"))      //позволяет подгружать страницы по мере необходимости, после обращения к ней пользователя\nconst ProfileContainer = React.lazy(() => import(\"./components/Profile/ProfileContainer\"))\nconst ChatPage = React.lazy(() => import(\"./pages/chat/ChatPage\"))\n\ntype MapPropsType = ReturnType<typeof mapStateToProps>\ntype DispatchPropsType = {\n    initializeApp: () => void\n}\n\nconst SuspendedDialogs = withSuspense(DialogsContainer)\nconst SuspendedProfile = withSuspense(ProfileContainer)\nconst SuspendedChatPage = withSuspense(ChatPage)\n\nclass App extends Component <MapPropsType & DispatchPropsType> {\n\n    state = {\n        collapsed: false,\n    };\n\n    onCollapse = (collapsed: any) => {\n        console.log(collapsed);\n        this.setState({collapsed});\n    };\n\n    catchAllUnhandlesErrors = (e: PromiseRejectionEvent) => {\n        alert(\"Some error occurred\")\n    }\n\n    componentDidMount() {\n        this.props.initializeApp();\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <Preloader/>\n        }\n        const {collapsed} = this.state;\n        return (\n            <Layout style={{minHeight: '100vh'}}>\n                <Sider collapsible collapsed={collapsed} onCollapse={this.onCollapse}>\n                    <div className=\"logo\"/>\n                    <Menu theme=\"dark\" defaultSelectedKeys={['1']} mode=\"inline\">\n                        <SubMenu key=\"sub1\" icon={<UserOutlined/>} title=\"User\">\n                            <Menu.Item key=\"1\"><Link to=\"/profile\">Profile</Link></Menu.Item>\n                            <Menu.Item key=\"2\">Settings</Menu.Item>\n                            <Menu.Item key=\"3\"><Link to=\"/dialogs\">Massages</Link></Menu.Item>\n                            <Menu.Item key=\"4\"><Link to=\"/chat\">Chat</Link></Menu.Item>\n                        </SubMenu>\n                        <SubMenu key=\"sub2\" icon={<TeamOutlined/>} title=\"Developers\">\n                            <Menu.Item key=\"6\"><Link to=\"/developers\">Developers</Link></Menu.Item>\n                        </SubMenu>\n                        <Menu.Item key=\"9\" icon={<SmileOutlined/>}>\n                            <LoginLogout/>\n                        </Menu.Item>\n                    </Menu>\n                </Sider>\n                <Layout className=\"site-layout\">\n                    <Header className=\"site-layout-background\" style={{padding: 0}}/>\n                    <Content style={{margin: '0 16px'}}>\n                        <div className=\"site-layout-background\" style={{padding: 24, minHeight: 360}}>\n                            <Switch>\n                                <Route exact path=\"/\"\n                                       render={() => <Redirect to={\"/profile\"}/>}/>\n                                <Route path='/dialogs'\n                                       render={() => <SuspendedDialogs/>}/>\n                                <Route path='/profile/:userId?'\n                                       render={() => <SuspendedProfile/>}/>\n                                <Route path=\"/developers\"\n                                       render={() => <UsersPage pageTitle={\"Developers\"}/>}/>\n                                <Route path=\"/login\"\n                                       render={() => <LoginPage/>}/>\n                                <Route path=\"/chat\"\n                                       render={() => <SuspendedChatPage/>}/>\n                                <Route path=\"*\"\n                                       render={() => <div>404 NOT FOUND</div>}/>\n\n                            </Switch>\n                        </div>\n                    </Content>\n                    <Footer style={{textAlign: 'center'}}>Created by </Footer>\n                </Layout>\n            </Layout>\n        )\n    }\n}\n\nconst mapStateToProps = (state: AppStateType) => ({\n    initialized: state.app.initialized\n})\n\n\nlet AppContainer = compose<React.ComponentType>(\n    withRouter,\n    connect(mapStateToProps, {initializeApp}))(App);\n\nconst MyPetJSApp: React.FC = () => {\n    return <HashRouter>\n        <Provider\n            store={reduxStore}>         {/*Провайдер добавляет стор в контекст, что позволяет вызывать его из дочерних компонентов с помощью функции Connect, mapStateToProps, mapDispatchToProps*/}\n            <AppContainer/>\n        </Provider>\n    </HashRouter>\n}\nexport default MyPetJSApp;","import React from 'react';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport ReactDOM from 'react-dom';\nimport MyPetJSApp from \"./App\";\n\n\nReactDOM.render(<MyPetJSApp/>, document.getElementById('root'));\n\n\n// eslint-disable-next-line no-undef\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n\n","import React from 'react';\r\nimport s from './FormControls.module.css';\r\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\r\nimport {FieldValidatorType} from \"../../../utils/validators/validators\";\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nconst FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\r\n    const hasError = touched && error;\r\n\r\n    return (\r\n        <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            <div>\r\n                {hasError && <span>{error}</span>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, children, ...restProps} = props;\r\n    return <FormControl {...props}><textarea {...input} {...restProps} /></FormControl>\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, children, ...restProps} = props;\r\n    return <FormControl {...props}><input {...input} {...restProps} /></FormControl>\r\n}\r\n\r\n\r\nexport function createField <FormKysType extends string> (placeholder: string | undefined,\r\n                            name: FormKysType,\r\n                            validators: Array<FieldValidatorType>,\r\n                            component: React.FC<WrappedFieldProps>,\r\n                            props = {},\r\n                            text = \"\") {\r\n    return     (\r\n        <div>\r\n            <Field placeholder={placeholder}\r\n                   name={name}\r\n                   validate={validators}\r\n                   component={component}\r\n                   {...props}\r\n            /> {text}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport type GetStringKeys<T> = Extract<keyof T, string>","export default __webpack_public_path__ + \"static/media/126.d80b876c.gif\";","import preloader from \"../../../assets/images/126.gif\";\r\nimport React from \"react\";\r\n\r\ntype PropsType = {\r\n}\r\n\r\nlet Preloader: React.FC = (props) => {\r\n    return     <div>\r\n        <img src={preloader}/>\r\n    </div>\r\n}\r\n\r\nexport default Preloader;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form-control\":\"FormControls_form-control__2GERW\",\"formControl\":\"FormControls_formControl__3spPo\",\"error\":\"FormControls_error__1p7Bx\",\"formSummaryError\":\"FormControls_formSummaryError__1Mjm5\"};"],"sourceRoot":""}